@using System.Web.Helpers
@using System;

@{
    ViewData["Title"] = "Timers";
}

@*Cindie*@
@model List<BaristaHome.Models.StoreTimer>
<html>
    <head>

        @*Imported stylesheets to use for CSS styling*@
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>@ViewData["Title"] • Barista Home</title>
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
        <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
        <link rel="stylesheet" href="~/BaristaHome.styles.css" asp-append-version="true" />
        <style>
        div {
            display:flex;
            flex-direction: row;
            flex-wrap: wrap;
                
        }
        .gfg {
            all: unset;
        }

        a {
            color: inherit;
            text-decoration: none;
        }

         @*CSS styling for the timer and its components*@
        .timer {
            font-family: 'ArialRounded', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
            font-weight: 300;
            display: inline;
            border-radius: 20px;
            background: white;
            display:flex;
            flex-direction:column;
            align-content:center;
            margin-right: 15px;
            margin-bottom: 15px;
            flex-wrap:nowrap;
        }

        .timer-digits{
            display:block;
            margin-top: 10px;
            text-align:center;
            margin-bottom: 10px;
            flex-wrap:nowrap;
           
        }

        .timer-title{
            text-align:center;
            color:navy;
            font-size:25px;
            margin-top:-25px;
            display:block;
            flex-wrap:nowrap;
        }

        .buttons{
            display:flex;
            justify-content:center;
        }

        .timer__part {
            font-size: 40px;
            font-weight: bold;

        }

        .timer__btn {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: none;
            color: white;
            background-color: palevioletred;
            cursor: pointer;
            margin-left: 10px;
        }

        .timer__btn--start {
            background: #9bd0b7;
        }

        .timer__btn--stop {
            background: #f6b4bf ;
        }

        .timer__btn--restart{
            background:#f6aa90;
        }
        
        .timer__btn--remove{
            background: red;
        }
        .delete-button{
            align-self:end;
            margin-right: 20px;
            margin-top:15px;
        }

        .trash-can{
            align-self:end;
            margin-top: 15px;
            margin-right: 20px;
        }

        .background {
            background-color: antiquewhite;
            box-shadow: 1px 1px 0 rgba(0, 0, 0, 0.15);
            padding-top: 30px;
            padding-bottom: 30px;
            padding-left: 30px;
            padding-right: 30px;
            display: flex;
            flex-direction: row;

        }

        .timer-perimeter{
            background: white;
            display:inline-block;
            height: 200px;
            width: 250px;
            display:flex;
            flex-direction:column;
            border-radius:20px;
            box-shadow: 1px 1px 0 rgba(0, 0, 0, 0.15);

        }

        @*CSS for delete a timer*@

        .button-area{
            display:flex;
           flex-direction: row;
            justify-content:space-between;
            
        }

        @*CSS for create a timer button*@
        .pink-button {
            background-color: pink;
            color: black;
            border: none;
            border-radius: 3px;
            padding-top: 10px;
            padding-bottom: 10px;
            padding-left: 20px;
            padding-right: 20px;
            margin-bottom: 10px;
            box-shadow: 1px 1px 1px 0 rgba(0, 0, 0, 0.15);
            transition: background-color 0.15s, color 0.15s;
            display: inline-block;
        }

        .pink-button:hover {
            background-color: lightpink;
            cursor: pointer;
        }

        .pink-button:active {
            background-color: rgba(219, 113, 152, 0.67);
        }
        
        .pink-button-left {
            background-color: #DFB3D3;
            color: black;
            font-family: 'Inter';
            width: 200px;
            height: 50px;
            float: left;
            margin-left: 45px;
            text-decoration-line: none;
            font-size: 25px;
            align-items: center;
            justify-content: center;
            text-align: center;
        }

        .center {
            width: 75%;
            text-align: center;
        }
        </style>

        @*Bootstrap imports*@
        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
        
        @*Google Material Symbols/Icons*@
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
   
    </head>
     
    <body>
        <header>
            <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light border-bottom box-shadow mb-3" style="background-color:#ffdcf4">
                <a class="nav-link pink-button-left" asp-area="" asp-controller="Home" asp-action="Index">Back</a>

                <div class="center">
                    <h1 class="title">Timers</h1>
                </div>
            </nav>
        </header>

        <div class="container">
            <div style= "min-width: 1400px;" class="button-area">
            
                @*Create a timer button*@  
                <div>
                    <a class="pink-button" asp-area="" asp-controller="Timers" asp-action="CreateTimer">Create a timer</a>
                </div>
               
            
                @*Delete timer dropdown and delete button*@
                <div class="delete-timer-area">
                    <form asp-action = "DeleteTimer">
                    <select placeholder="Select Timer" name="timerId" asp-items="ViewBag.Timers"></select>
                    <button class="pink-button" type="submit" asp-action="DeleteTimer" >Delete</button>
                    </form>
                </div>
            </div>

        
            @*Timer*@
            <div class="background">
                <div  id="timer-container"> </div>
            </div>
        </div>
        
        <script>
         @*Timer class*@
        class Timer {
            constructor(root, timer) {
                this.timer = timer;
                root.innerHTML = Timer.getHTML(this.timer);

                 @*References to the span elements in the getHTML() method below*@
                this.el = {
                    minutes: root.querySelector(".timer__part--minutes"),
                    seconds: root.querySelector(".timer__part--seconds"),
                    control: root.querySelector(".timer__btn--control"),
                    restart: root.querySelector(".timer__btn--restart"),
                };

                @*Save reference to the timer object*@
                this.timer = timer;

                @*Initialize timer for when it first loads*@
                this.interval = null;
                this.remainingSeconds = this.timer.durationMin * 60;
                this.updateInterfaceTime();

                @*If restart button is clicked*@
                this.el.restart.addEventListener("click", () => {
                    
                    this.stop();
                    this.remainingSeconds =  this.timer.durationMin * 60;
                    this.updateInterfaceTime();
                    
                });

                @*If play/pause button is clicked*@
                this.el.control.addEventListener("click", () => {
                    @*If there is no time interval running start counting down // go to start method*@
                    if (this.interval === null) {
                        this.start();

                    @*Otherwise, go to stop method*@
                    } else {
                        this.stop();
                    }
                });



            }

            @*For updating time*@
            updateInterfaceTime() {

                @*Calculate remaining minutes and seconds*@
                const minutes = Math.floor(this.remainingSeconds / 60);
                const seconds = this.remainingSeconds % 60;

                @*Format the time so that if minutes or seconds is 1 digit, then a 0 is added to the front to display it with 2 digits*@
                this.el.minutes.textContent = minutes.toString().padStart(2, "0");
                this.el.seconds.textContent = seconds.toString().padStart(2, "0");
            }

            updateInterfaceControls() {
                
                @*If time interval is not running, set the control button's' icon to a play arrow*@
                if (this.interval === null) {
                    this.el.control.innerHTML = `<span class="material-icons">play_arrow</span>`;
                    this.el.control.classList.add("timer__btn--start");
                    this.el.control.classList.remove("timer__btn--stop");

                @*If it isn't running/changing then set it to a pause*@
                } else {
                    this.el.control.innerHTML = `<span class="material-icons">pause</span>`;
                    this.el.control.classList.add("timer__btn--stop");
                    this.el.control.classList.remove("timer__btn--start");
                }
            }

            start() {
                @*If there are no sec left, cancel out the current operation*@
                if (this.remainingSeconds === 0) return;

                @*Set interval function*@
                @*Every 1 second/1000ms, subtract 1 from the remaining seconds and update the interface's time*@
                this.interval = setInterval(() => {
                    this.remainingSeconds--;
                    this.updateInterfaceTime();

                    @*If there's 0 seconds left after subtracting 1, then stop the timer*@
                    if (this.remainingSeconds === 0) {
                        this.stop();
                    }
                }, 1000);

                @*Display pause button*@
                this.updateInterfaceControls();
            }

            @*Used by pause button*@
            stop() {

                @*Stops the code running in set interval function*@
                clearInterval(this.interval);

                @*Clear the interval*@
                this.interval = null;

                @*Display play button again*@
                this.updateInterfaceControls();
            }






            static getHTML(timer) {
                return `
                    <div class="timer-title">${timer.timerName}</div>
                    <div class="timer-digits">
                        <span class="timer__part timer__part--minutes">this.timer.durationMin</span>
                        <span class="timer__part">:</span>
                        <span class="timer__part timer__part--seconds">00</span>
                    </div>
                    <div class="buttons">
                        <button type="button" class="timer__btn timer__btn--control timer__btn--start">
                            <span class="material-icons">play_arrow</span>
                        </button>


                        <button type="button" class="timer__btn timer__btn--restart">
                            <span class="material-icons">refresh</span>
                        </button>


                    </div>
                `;
            }
        }
        
        const timers = JSON.parse('@Html.Raw(Json.Serialize(Model))');
        const root = document.getElementById("timer-container");
        const container = document.createElement("div");
        document.getElementById("timer-container").appendChild(container);
        for (let t of timers) {
            const timerDiv = document.createElement("div");
            timerDiv.classList.add("background");
            timerDiv.classList.add("timer-perimeter");
            timerDiv.classList.add("timer");  
            container.appendChild(timerDiv);
            const timer = new Timer(timerDiv,t);
        }

        </script>

        
    </body>



</html>

