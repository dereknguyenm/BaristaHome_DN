@{
    ViewData["Title"] = "Timers";
}

@model BaristaHome.Models.StoreTimer
<html>
    <head>
        <style>


        .timer {
            font-family: 'ArialRounded', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
            font-weight: 300;
            display: inline-block;
            border-radius: 20px;
            background: white;
            height: 200px;
            width: 250px;
            display:flex;
            flex-direction:column;
            align-content:center;
        }

        .timer-digits{
            margin-top: 10px;
            margin-left:5px;
            text-align:center;
            margin-bottom: 10px;
           
        }

        .timer-title{
            text-align:center;
            color:navy;
            font-size:25px;
            padding-top: 10px;
        }

        .buttons{
            display:flex;
            justify-content:center;
        }

        .timer__part {
            font-size: 40px;
            font-weight: bold;
        }

        .timer__btn {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: none;
            color: white;
            background-color: palevioletred;
            cursor: pointer;
            margin-left: 10px;
        }

        .timer__btn--start {
            background: #00b84c;
            margin-right: 10px;
        }

        .timer__btn--stop {
            background: #ff0256;
        }

        .timer__btn--restart{
            background:red;
        }


        </style>

        @*Bootstrap imports*@
        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>

    </head>

    <body>
        <div class="text-center">
            <h1 class="display-4">Timers</h1>
        </div>

        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
        <p>@Model.TimerName</p>
        <p>@Model.DurationMin</p>

        <div class="timer"></div>
        <!-- Modal: get input (minutes) and send to CreateTimer() method -->
        <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header border-0">
                        <button type="button" class="x-button" data-dismiss="modal">x</button>
                    </div>
                    <div style="margin-left: 30px; font-size: 20px;" class="modal-body">
                        <form asp-action="CreateTimer" method="post" enctype="multipart/form-data">
                        <input type="hidden" asp-for="TimerName" value="@Model.StoreTimerId" />
                        <div class="form-group">
                            <label asp-for="TimerName" class="control-label"></label>
                            <input asp-for="TimerName" class="form-control" />
                            <span asp-validation-for="TimerName" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="DurationMin" class="control-label"></label>
                            <input asp-for="DurationMin" class="form-control" />
                            <span asp-validation-for="DurationMin" class="text-danger"></span>
                        </div>
                        </form>
                    Create timer
                    </div>
                    <div class="modal-footer border-0">
                        <button type="submit"  data-dismiss="modal">Ok</button>
                    </div>
                </div>
            </div>
        </div>
    
        <script>
        class Timer {
            constructor(root) {
                root.innerHTML = Timer.getHTML();

                this.el = {
                    minutes: root.querySelector(".timer__part--minutes"),
                    seconds: root.querySelector(".timer__part--seconds"),
                    control: root.querySelector(".timer__btn--control"),
                    reset: root.querySelector(".timer__btn--reset"),
                    restart: root.querySelector(".timer__btn--restart")
                };

                this.interval = @Model.DurationMin;
                this.remainingSeconds = 0;

                this.el.restart.addEventListener("click", () => {
                    if (this.interval === null) {
                        this.stop();
                    } else {
                        this.stop();
                        this.remainingSeconds = 3 * 60;
                        this.updateInterfaceTime();
                    }
                });

                this.el.control.addEventListener("click", () => {
                    if (this.interval === null) {
                        this.start();
                    } else {
                        this.stop();
                    }
                });

                this.el.reset.addEventListener("click", () => {
                    const inputMinutes = @Model.DurationMin;

                    if (inputMinutes < 60) {
                        this.stop();
                        this.remainingSeconds = inputMinutes * 60;
                        this.updateInterfaceTime();
                    }
                });
            }

            updateInterfaceTime() {
                const minutes = Math.floor(this.remainingSeconds / 60);
                const seconds = this.remainingSeconds % 60;

                this.el.minutes.textContent = minutes.toString().padStart(2, "0");
                this.el.seconds.textContent = seconds.toString().padStart(2, "0");
            }

            updateInterfaceControls() {
                if (this.interval === null) {
                    this.el.control.innerHTML = `<span class="material-icons">play_arrow</span>`;
                    this.el.control.classList.add("timer__btn--start");
                    this.el.control.classList.remove("timer__btn--stop");
                } else {
                    this.el.control.innerHTML = `<span class="material-icons">pause</span>`;
                    this.el.control.classList.add("timer__btn--stop");
                    this.el.control.classList.remove("timer__btn--start");
                }
            }

            start() {
                if (this.remainingSeconds === 0) return;

                this.interval = setInterval(() => {
                    this.remainingSeconds--;
                    this.updateInterfaceTime();

                    if (this.remainingSeconds === 0) {
                        this.stop();
                    }
                }, 1000);

                this.updateInterfaceControls();
            }

            stop() {
                clearInterval(this.interval);

                this.interval = null;

                this.updateInterfaceControls();
            }


            static getHTML() {
                return `
                    <div class="timer-title">
                        @Model.TimerName
                    </div>
                    <div class="timer-digits">
                        <span class="timer__part timer__part--minutes">@Model.DurationMin</span>
                        <span class="timer__part">:</span>
                        <span class="timer__part timer__part--seconds">00</span>
                    </div>
                    <div class="buttons">
                        <button type="button" class="timer__btn timer__btn--control timer__btn--start">
                            <span class="material-icons">play_arrow</span>
                        </button>
                        <button type="button" class="timer__btn timer__btn--reset" data-toggle="modal" data-target="#exampleModalCenter" >
                            <span class="material-icons">timer</span>
                        </button>

                        <button type="button" class="timer__btn timer__btn--restart">
                            <span class="material-icons">timer</span>
                        </button>
                    </div>
                `;
            }
        }

        new Timer(
            document.querySelector(".timer")
        );
        </script>
    </body>

</html>

